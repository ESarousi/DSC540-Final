{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 617,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "from fuzzywuzzy import fuzz\n",
    "import csv\n",
    "import json\n",
    "import lxml.html as lh\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "import requests\n",
    "import seaborn as sns\n",
    "import sqlite3\n",
    "import urllib.request #importing packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def flatten(list_of_lists):\n",
    "    if len(list_of_lists) == 0:\n",
    "        return list_of_lists\n",
    "    if isinstance(list_of_lists[0], list):\n",
    "        return flatten(list_of_lists[0]) + flatten(list_of_lists[1:])\n",
    "    return list_of_lists[:1] + flatten(list_of_lists[1:])\n",
    "#There are a lot of nested lists. This will flatten all lists into one.\n",
    "#Replace Headers\n",
    "with urllib.request.urlopen('https://api.fda.gov/drug/label.json?search=adverse_reactions:\"aspirin\"&limit=5') as url:\n",
    "    #This brings in the info from the API.\n",
    "    api = json.loads(url.read().decode()) #This decodes the info coming in.\n",
    "    api['about'] = api['meta'] #Changing the dictionary key.\n",
    "    del api['meta'] #Deleting the old key.\n",
    "#-Find duplicates\n",
    "\n",
    "apidup = api['results'][0]['adverse_reactions'][0] #pulls the adverse reactions and looks into the list. \n",
    "apidup = apidup.split(' ') #Creates a new list, separated by a space.\n",
    "apidup\n",
    "\n",
    "apiduplist = [] #The new list.\n",
    "\n",
    "for x in apidup:\n",
    "    if x not in apiduplist:\n",
    "        apiduplist.append(x) #This removes all duplicates if it's not already in there.    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "fenurl = 'https://api.fda.gov/drug/label.json?search=adverse_reactions:\"fentanyl\"&limit=5'\n",
    "search = r'search=(.*)&limit' #This is a regular expression, which searches within the field.\n",
    "\n",
    "with urllib.request.urlopen('https://api.fda.gov/drug/label.json?search=adverse_reactions:\"fentanyl\"&limit=5') as url:\n",
    "        fen = json.loads(url.read().decode())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Format data into a more readable format\n",
    "fenresults = fen['results'][0]['adverse_reactions'][0]\n",
    "fenresults = fenresults.upper() #Fix casing or inconsistent values/capitalizing everything.\n",
    "fenresults = fenresults.split('.') #splits based on commas. \n",
    "fenresults = fenresults[17][140:] #Slicing through the data to find \n",
    "fenresults = fenresults.split(', ')\n",
    "fenresults[9] = fenresults[9].split('AND ') #isolating the 'and' to remove. \n",
    "fenresults[9] = 'ANOREXIA' #renaming an index for clarity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "fenOD = fen['results'][0]['overdosage'][0] #Filters to find the list.\n",
    "oldfenODlist = [] #The old list, which all the items go into it.\n",
    "fenODlist = [] #The new list, which everything will end up going into.\n",
    "\n",
    "oldfenODlist.append(fenOD[92:276].split(', '))\n",
    "oldfenODlist[0][5] = \"bradycardia\" \n",
    "oldfenODlist[0][6] = 'hypotension'\n",
    "oldfenODlist.append('death')\n",
    "\n",
    "fenODlist = flatten(oldfenODlist) #Flattens the old list and transfers it into the new one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "hydrocurl = 'https://api.fda.gov/drug/label.json?search=adverse_reactions:\"hydrocodone\"&limit=5'\n",
    "search = r'search=(.*)&limit'\n",
    "\n",
    "with urllib.request.urlopen('https://api.fda.gov/drug/label.json?search=adverse_reactions:\"hydrocodone\"&limit=5') as url:\n",
    "    if fuzz.WRatio(search, hydrocurl) >= 80: #Conduct Fuzzy Matchinga\n",
    "        hydroc = json.loads(url.read().decode())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Format data into a more readable format\n",
    "hydrocresults = hydroc['results'][0]['adverse_reactions'][0]\n",
    "hydrocresults = hydrocresults.upper() #Fix casing or inconsistent values\n",
    "hydrocresults = hydrocresults[69:126]\n",
    "hydrocresults = hydrocresults.split(',')\n",
    "hydrocresults[3] = hydrocresults[3].split('AND')\n",
    "hydrocresults[3] = 'NAUSEA'\n",
    "hydrocresults.append('VOMITING')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 419,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Format data into a more readable format\n",
    "oldhydrocODlist = []\n",
    "hydrocODlist = []\n",
    "hydrocOD = hydroc['results'][0]['overdosage'][0]\n",
    "oldhydrocODlist.append(hydrocOD[184:296])\n",
    "oldhydrocODlist.append(hydrocOD[298:439].split(\", \"))\n",
    "oldhydrocODlist.append(hydrocOD[463:516].split(\", \"))\n",
    "oldhydrocODlist[2] = oldhydrocODlist[2][2].split(' and ')\n",
    "oldhydrocODlist[0] = oldhydrocODlist[0].split(\" (a decrease in respiratory rate and/or tidal volume, Cheyne-Stokes respiration, cyanosis)\")\n",
    "oldhydrocODlist[0].remove(\"\")\n",
    "\n",
    "hydrocODlist = flatten(oldhydrocODlist)\n",
    "\n",
    "hydrocODlist[4] = \"bradycardia\"\n",
    "hydrocODlist.insert(5,'hypotension')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "hydromurl = 'https://api.fda.gov/drug/label.json?search=adverse_reactions:\"hydromorphone\"&limit=5'\n",
    "\n",
    "with urllib.request.urlopen('https://api.fda.gov/drug/label.json?search=adverse_reactions:\"hydromorphone\"&limit=5') as url:\n",
    "    if fuzz.WRatio(search, hydromurl) >= 80: #Conduct Fuzzy Matchinga\n",
    "        hydrom = json.loads(url.read().decode())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Format data into a more readable format\n",
    "hydromresults = hydrom['results'][0]['adverse_reactions'][0]\n",
    "hydromresults = hydromresults.upper() #Fix casing or inconsistent values\n",
    "hydromresults = hydromresults[792:912]\n",
    "hydromresults = hydromresults.split(', ')\n",
    "hydromresults[10] = hydromresults[10].split('AND ')\n",
    "hydromresults[10] = 'PRURITUS'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['respiratory depression',\n",
       " 'somnolence progressing to stupor or coma',\n",
       " 'skeletal muscle flaccidity',\n",
       " 'cold and clammy skin',\n",
       " 'constricted pupils',\n",
       " 'pulmonary edema',\n",
       " 'bradycardia',\n",
       " 'hypotension',\n",
       " 'partial or complete airway obstruction',\n",
       " 'atypical snoring',\n",
       " 'death']"
      ]
     },
     "execution_count": 312,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hydromOD = hydrom['results'][0]['overdosage'][0]\n",
    "oldhydromODlist = []\n",
    "hydromODlist = []\n",
    "\n",
    "oldhydromODlist.append(hydromOD[158:424].split(\", \"))\n",
    "hydromODlist = flatten(oldhydromODlist)\n",
    "\n",
    "del hydromODlist[5]\n",
    "del hydromODlist[5]\n",
    "hydromODlist[10] = 'death'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "codurl = 'https://api.fda.gov/drug/label.json?search=adverse_reactions:\"codeine\"&limit=5'\n",
    "\n",
    "with urllib.request.urlopen('https://api.fda.gov/drug/label.json?search=adverse_reactions:\"codeine\"&limit=5') as url:\n",
    "    if fuzz.WRatio(search, codurl) >= 80: #Conduct Fuzzy Matchinga\n",
    "        cod = json.loads(url.read().decode())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Format data into a more readable format\n",
    "codresults = cod['results'][0]['adverse_reactions'][0]\n",
    "codresults = codresults.upper() #Fix casing or inconsistent values\n",
    "codresults = codresults[1514:1642]\n",
    "codresults = codresults.split(', ')\n",
    "codresults[8] = codresults[8].split('AND')\n",
    "codresults[8] = \"INTOXICATED FEELING\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "codod = cod['results'][0]['overdosage'][0]\n",
    "oldcododlist = []\n",
    "cododlist = []\n",
    "\n",
    "oldcododlist.append(codod[145:411].split(', '))\n",
    "cododlist = flatten(oldcododlist)\n",
    "\n",
    "del cododlist[5:6]\n",
    "cododlist[11] = 'death'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "mepurl = 'https://api.fda.gov/drug/label.json?search=adverse_reactions:\"meperidine\"&limit=5'\n",
    "\n",
    "with urllib.request.urlopen('https://api.fda.gov/drug/label.json?search=adverse_reactions:\"meperidine\"&limit=5') as url:\n",
    "    if fuzz.WRatio(search, mepurl) >= 80: #Conduct Fuzzy Matchinga\n",
    "        mep = json.loads(url.read().decode())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Format data into a more readable format\n",
    "mepresults = mep['results'][0]['adverse_reactions'][0]\n",
    "mepresults = mepresults.upper() #Fix casing or inconsistent values\n",
    "mepresults = mepresults[277:345]\n",
    "mepresults = mepresults.split(', ')\n",
    "mepresults[4] = mepresults[4].split('AND')\n",
    "mepresults[4] = 'VOMITING'\n",
    "mepresults.append('SWEATING')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "merod = mep['results'][0]['overdosage'][0]\n",
    "oldmerodlist = []\n",
    "merodlist = []\n",
    "\n",
    "oldmerodlist.append(merod[73:453].split(', '))\n",
    "oldmerodlist.insert(3,oldmerodlist[0][5].split('and '))\n",
    "merodlist = flatten(oldmerodlist)\n",
    "\n",
    "merodlist[0] = 'respiratory depression'\n",
    "del merodlist[1:3]\n",
    "del merodlist[3:4]\n",
    "del merodlist[3]\n",
    "merodlist[5] = 'cardiac arrest'\n",
    "merodlist[6] = merodlist[6] + 'and ' + merodlist[7]\n",
    "del merodlist[7]\n",
    "merodlist[7] = 'bradycardia'\n",
    "merodlist[8] = 'hypotension'\n",
    "merodlist.append('death')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "drugs = [\"Fentanyl\", \"Hydrocodone\", \"Hydromorphone\", \"Codeine\", \"Mepedine\"]\n",
    "sideeffects = [fenresults, hydrocresults, hydromresults, codresults, mepresults]\n",
    "od = [fenODlist, hydrocODlist, hydromODlist, cododlist, merodlist]\n",
    "cols = [\"Drug\", \"Side_Effects\", \"Overdose_Information\"]\n",
    "cat = zip(drugs, sideeffects, od)\n",
    "api_df = pd.DataFrame(data=cat, columns = cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [],
   "source": [
    "api_df[\"Drug\"] = api_df[\"Drug\"].astype('str')\n",
    "api_df[\"Side_Effects\"] = api_df[\"Side_Effects\"].astype('str')\n",
    "api_df[\"Overdose_Information\"] = api_df[\"Overdose_Information\"].astype('str')\n",
    "# api_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x247913b51f0>"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# conn.execute('''CREATE TABLE DRUG_API\n",
    "#         (ID INT PRIMARY KEY     NOT NULL,\n",
    "#         DRUG           TEXT    NOT NULL,\n",
    "#         SIDE_EFFECTS           TEXT    NOT NULL,\n",
    "#         OVERDOSE_INFORMATION           TEXT    NOT NULL)''')\n",
    "#Creating an SQL table - largely by reference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [],
   "source": [
    "# conn = sqlite3.connect('drugdosage.db')\n",
    "# api_df.to_sql('DRUGAPI_',con = conn, if_exists = 'replace')\n",
    "# conn.execute('''SELECT * FROM DRUGAPI_''').fetchall()\n",
    "# #conn.close()\n",
    "#Connecting with the drugdosage database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "200\n"
     ]
    }
   ],
   "source": [
    "url = \"https://www.healthcare.uiowa.edu/familymedicine/fpinfo/Docs/adultopioidrefguide.htm\"\n",
    "page = requests.get(url)\n",
    "print(page.status_code) #Verifying web works."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "soup = BeautifulSoup(page.content, 'html.parser')\n",
    "bsoup = soup.prettify()\n",
    "bsoup = bsoup.replace(\"\\n\",\"\") #remove bad characters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Looking for all tables on the website\n",
    "all_tables=soup.find_all(\"table\") \n",
    "right_table = soup.find('table',{'class':'MsoNormalTable'})\n",
    "data = [ [ td.text for td in tr.find_all(\"td\") ] for tr in right_table.find_all(\"tr\")]\n",
    "data = data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1. Format data into a more readable format\n",
    "df = pd.DataFrame(data) #Turning to pandas\n",
    "df = df.replace(r'\\n','', regex=True)\n",
    "df = df.replace(r'\\t','', regex=True)\n",
    "df = df.replace(r'\\s\\s\\s','', regex=True) #Cleaning stray marks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_header = df.iloc[0]\n",
    "df.columns = new_header #making the first line the columns.\n",
    "df = df.iloc[1:]\n",
    "df = df.rename(columns={\"Drug\": \"DRUG\", \"Route\": \"ROUTE\", \"Starting Dose (Adults > 50 Kg)\": \"Starting Dose\", \"Onset\": \"ONSET\", \"Peak\": \"PEAK\", \"Duration\": \"DURATION\", \"Metabolism\": \"METABOLISM\", \"Half Life\": \"HALF LIFE\", \"Comments\": \"COMMENTS\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['DRUG'] = df['DRUG'].apply(word_split) #Applying word split to everything to ensure cosistency through values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "metadata": {},
   "outputs": [],
   "source": [
    "fen = \"Fentanyl(Sublimaze®)  (Duragesic®)\"\n",
    "hyc = \"Hydrocodone with acetaminophen**Lortab®, Vicodin®)\"\n",
    "hc2 = \"Hydrocodone with acetaminophen**(Lortab®, Vico\"\n",
    "hym = \"Hydromorphone(Dilaudid®)\"\n",
    "cod = \"Codeine\"\n",
    "mer = \"Meperidine(Demerol®)\"\n",
    "\n",
    "for x in range(len(df[\"DRUG\"])): #This loop is used to locate all instances of one word and if it meets a certain partial\n",
    "#ratio threshold, the swap will happen.\n",
    "    line = df[\"DRUG\"].iloc[x]\n",
    "    if fuzz.partial_ratio (line,fen) >= 100:\n",
    "        df[\"DRUG\"].iloc[x] = \"Fentanyl\"\n",
    "        \n",
    "for x in range(len(df[\"DRUG\"])):\n",
    "    line = df[\"DRUG\"].iloc[x]\n",
    "    if fuzz.partial_ratio (line,hyc) >= 100:\n",
    "        df[\"DRUG\"].iloc[x] = \"Hydrocodone\"\n",
    "        \n",
    "for x in range(len(df[\"DRUG\"])):\n",
    "    line = df[\"DRUG\"].iloc[x]\n",
    "    if fuzz.partial_ratio (line,hc2) >= 100:\n",
    "        df[\"DRUG\"].iloc[x] = \"Hydrocodone\"\n",
    "        \n",
    "for x in range(len(df[\"DRUG\"])):\n",
    "    line = df[\"DRUG\"].iloc[x]\n",
    "    if fuzz.partial_ratio (line,hym) >= 100:\n",
    "        df[\"DRUG\"].iloc[x] = \"Hydromorphone\"\n",
    "        \n",
    "for x in range(len(df[\"DRUG\"])):\n",
    "    line = df[\"DRUG\"].iloc[x]\n",
    "    if fuzz.partial_ratio (line,cod) >= 100:\n",
    "        df[\"DRUG\"].iloc[x] = \"Codeine\"\n",
    "        \n",
    "for x in range(len(df[\"DRUG\"])):\n",
    "    line = df[\"DRUG\"].iloc[x]\n",
    "    if fuzz.partial_ratio (line,mer) >= 100:\n",
    "        df[\"DRUG\"].iloc[x] = \"Merpidine\"\n",
    "        \n",
    "df.DRUG = df.DRUG.str.capitalize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 619,
   "metadata": {},
   "outputs": [],
   "source": [
    "med = pd.read_csv(\"medicine_prescription_records.csv\") #connecting to the csv file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 620,
   "metadata": {},
   "outputs": [],
   "source": [
    "del med['years_practicing']\n",
    "del med['specialty']\n",
    "del med['Unnamed: 0'] #deleting unnecessary columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fen = med.loc[(med['Drugs'] == \"FENTANYL\")]\n",
    "HyA = med.loc[(med['Drugs'] == \"HYDROCODONE-ACETAMINOPHEN\")]\n",
    "Mor = med.loc[(med['Drugs'] == \"MORPHINE SULFATE\")]\n",
    "AcC = med.loc[(med['Drugs'] == \"ACETAMINOPHEN-CODEINE\")]\n",
    "HyH = med.loc[(med['Drugs'] == \"HYDROMORPHONE HCL\")]\n",
    "MeH = med.loc[(med['Drugs'] == \"METHADONE HCL\")]\n",
    "OxH = med.loc[(med['Drugs'] == \"OXYCODONE HCL\")] #assigning variables to drugs within the variables.\n",
    "sum = len(Fen) + len(HyA) + len(Mor) + len(AcC) + len(HyH) + len(MeH)+len(OxH)\n",
    "\n",
    "med = med.drop(med[(med['Drugs'] !='FENTANYL') & (med['Drugs'] != \"HYDROCODONE-ACETAMINOPHEN\") & (med['Drugs'] != \"MORPHINE SULFATE\") & (med['Drugs'] != \"ACETAMINOPHEN-CODEINE\") & (med['Drugs'] != \"HYDROMORPHONE HCL\")].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 621,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fuzzy matching to ensure good matches to reflect within the table.\n",
    "drug_fen = \"FENTANYL\"\n",
    "drug_hyc = \"HYDROCODONE-ACETAMINOPHEN\"\n",
    "drug_hym = \"HYDROMORPHONE HCL\"\n",
    "drug_cod = \"ACETAMINOPHEN-CODEINE\"\n",
    "\n",
    "for x in range(len(drug_df[\"Drugs\"])):\n",
    "    line = drug_df[\"Drugs\"].iloc[x]\n",
    "    if fuzz.partial_ratio (line,drug_fen) >= 100:\n",
    "        drug_df[\"Drugs\"].iloc[x] = \"Fentanyl\"\n",
    "       \n",
    "for x in range(len(drug_df[\"Drugs\"])):\n",
    "    line = drug_df[\"Drugs\"].iloc[x]\n",
    "    if fuzz.partial_ratio (line,drug_hyc) >= 100:\n",
    "        drug_df[\"Drugs\"].iloc[x] = \"Hydrocodone\"\n",
    "        \n",
    "for x in range(len(drug_df[\"Drugs\"])):\n",
    "    line = drug_df[\"Drugs\"].iloc[x]\n",
    "    if fuzz.partial_ratio (line,drug_hym) >= 100:\n",
    "        drug_df[\"Drugs\"].iloc[x] = \"Hydromorphone\"\n",
    "        \n",
    "for x in range(len(drug_df[\"Drugs\"])):\n",
    "    line = drug_df[\"Drugs\"].iloc[x]\n",
    "    if fuzz.partial_ratio (line,drug_cod) >= 100:\n",
    "        drug_df[\"Drugs\"].iloc[x] = \"Codeine\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #df.to_sql('DRUGS', con=conn) - Converting a dataframe to a SQL dataframe.\n",
    "# conn = sqlite3.connect('drugdosage.db')\n",
    "# conn.execute(\"SELECT * FROM DRUGS\").fetchall()\n",
    "# conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.to_sql('DRUGDOSAGE', con=conn, if_exists = 'replace')\n",
    "# conn = sqlite3.connect('drugdosage.db')#replace will replace existing records in existing table with new records.\n",
    "# conn.execute(\"SELECT * FROM DRUGDOSAGE\").fetchall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# drug_df.to_sql('DRUGLIST', con=conn, if_exists = 'replace')\n",
    "#append adds new record to existing table = 'if_exists = 'append'\n",
    "# conn = sqlite3.connect('drugdosage.db')#replace will replace existing records in existing table with new records.\n",
    "# conn.execute(\"SELECT * FROM DRUGLIST\").fetchall()\n",
    "# #conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 455,
   "metadata": {},
   "outputs": [],
   "source": [
    "# conn = sqlite3.connect('drugdosage.db')\n",
    "# conn.execute('''\n",
    "# SELECT\n",
    "#     name\n",
    "# FROM\n",
    "#     sqlite_master\n",
    "# WHERE\n",
    "#     type ='table' AND\n",
    "#     name NOT LIKE 'sqlite_%';''').fetchall()\n",
    "# #conn.close()\n",
    "#This is a trick to find out the different tables within the database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 457,
   "metadata": {},
   "outputs": [],
   "source": [
    "# conn.execute('''SELECT SQL FROM SQLITE_MASTER WHERE NAME = \"DRUGLIST\"''').fetchall()\n",
    "#Listing all unique values within the table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 456,
   "metadata": {},
   "outputs": [],
   "source": [
    "# conn.execute('''SELECT SQL FROM SQLITE_MASTER WHERE NAME = \"DRUGDOSAGE\"''').fetchall()\n",
    "\n",
    "# [Starting Dose] - With this error, use brackets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 458,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# conn.execute('''SELECT SQL FROM SQLITE_MASTER WHERE NAME = \"DRUGAPI_\"''').fetchall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "metadata": {},
   "outputs": [],
   "source": [
    "# conn.execute('''SELECT SQL FROM SQLITE_MASTER WHERE NAME = \"DRUGLIST\"''').fetchall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 460,
   "metadata": {},
   "outputs": [],
   "source": [
    "# conn.execute('''SELECT SQL FROM SQLITE_MASTER WHERE NAME = \"DRUGS\"''').fetchall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# data_received = conn.execute('''SELECT A.DRUG, A.ROUTE, A.[STARTING DOSE], A.ONSET, A.PEAK, A.DURATION, A.METABOLISM, A.[HALF LIFE],\n",
    "# A.COMMENTS, B.Side_Effects, B.Overdose_Information FROM DRUGDOSAGE A JOIN DRUGAPI_ B ON A.DRUG = B.Drug JOIN DRUGLIST ON\n",
    "# DRUGLIST.Drugs = A.DRUG''').fetchall()\n",
    "#joining all tables together based on the condition of the name of the drug in the first dataframe formed from the csv."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 623,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data_received_df = pd.DataFrame(data_received) #Creating a dataframe based on the information we were given.\n",
    "data_received_df.columns = ['Drug','Route','PO Starting Dose','PO Maximum Onset (Minutes)','PO Maximum Peak (Minutes)','PO Maximum Duration (Hours)','Metabolism','Average Half Life (Hours)','Comments','Side Effects','Overdose Information']\n",
    "#Renaming the columns.\n",
    "pd.set_option('display.max_colwidth', None) #Able to read all information within the columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 626,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Route</th>\n",
       "      <th>PO Starting Dose</th>\n",
       "      <th>PO Maximum Onset (Minutes)</th>\n",
       "      <th>PO Maximum Peak (Minutes)</th>\n",
       "      <th>PO Maximum Duration (Hours)</th>\n",
       "      <th>Metabolism</th>\n",
       "      <th>Average Half Life (Hours)</th>\n",
       "      <th>Comments</th>\n",
       "      <th>Side Effects</th>\n",
       "      <th>Overdose Information</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2912</th>\n",
       "      <td>Hydrocodone</td>\n",
       "      <td>PO</td>\n",
       "      <td>5-10 mg 4-6 hr</td>\n",
       "      <td>60</td>\n",
       "      <td>120</td>\n",
       "      <td>6</td>\n",
       "      <td>Liver</td>\n",
       "      <td>4</td>\n",
       "      <td>Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.</td>\n",
       "      <td>['LIGHTHEADEDNESS', ' DIZZINESS', ' SEDATION', 'NAUSEA', 'VOMITING']</td>\n",
       "      <td>['respiratory depression', 'extreme somnolence progressing to stupor or coma', 'skeletal muscle flaccidity', 'cold and clammy skin', 'bradycardia', 'hypotension', 'cardiac arrest', 'death']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2032</th>\n",
       "      <td>Hydrocodone</td>\n",
       "      <td>PO</td>\n",
       "      <td>5-10 mg 4-6 hr</td>\n",
       "      <td>60</td>\n",
       "      <td>120</td>\n",
       "      <td>6</td>\n",
       "      <td>Liver</td>\n",
       "      <td>4</td>\n",
       "      <td>Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.</td>\n",
       "      <td>['LIGHTHEADEDNESS', ' DIZZINESS', ' SEDATION', 'NAUSEA', 'VOMITING']</td>\n",
       "      <td>['respiratory depression', 'extreme somnolence progressing to stupor or coma', 'skeletal muscle flaccidity', 'cold and clammy skin', 'bradycardia', 'hypotension', 'cardiac arrest', 'death']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3697</th>\n",
       "      <td>Hydrocodone</td>\n",
       "      <td>PO</td>\n",
       "      <td>5-10 mg 4-6 hr</td>\n",
       "      <td>60</td>\n",
       "      <td>120</td>\n",
       "      <td>6</td>\n",
       "      <td>Liver</td>\n",
       "      <td>4</td>\n",
       "      <td>Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.</td>\n",
       "      <td>['LIGHTHEADEDNESS', ' DIZZINESS', ' SEDATION', 'NAUSEA', 'VOMITING']</td>\n",
       "      <td>['respiratory depression', 'extreme somnolence progressing to stupor or coma', 'skeletal muscle flaccidity', 'cold and clammy skin', 'bradycardia', 'hypotension', 'cardiac arrest', 'death']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2302</th>\n",
       "      <td>Hydrocodone</td>\n",
       "      <td>PO</td>\n",
       "      <td>5-10 mg 4-6 hr</td>\n",
       "      <td>60</td>\n",
       "      <td>120</td>\n",
       "      <td>6</td>\n",
       "      <td>Liver</td>\n",
       "      <td>4</td>\n",
       "      <td>Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.</td>\n",
       "      <td>['LIGHTHEADEDNESS', ' DIZZINESS', ' SEDATION', 'NAUSEA', 'VOMITING']</td>\n",
       "      <td>['respiratory depression', 'extreme somnolence progressing to stupor or coma', 'skeletal muscle flaccidity', 'cold and clammy skin', 'bradycardia', 'hypotension', 'cardiac arrest', 'death']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3626</th>\n",
       "      <td>Hydrocodone</td>\n",
       "      <td>PO</td>\n",
       "      <td>5-10 mg 4-6 hr</td>\n",
       "      <td>60</td>\n",
       "      <td>120</td>\n",
       "      <td>6</td>\n",
       "      <td>Liver</td>\n",
       "      <td>4</td>\n",
       "      <td>Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.</td>\n",
       "      <td>['LIGHTHEADEDNESS', ' DIZZINESS', ' SEDATION', 'NAUSEA', 'VOMITING']</td>\n",
       "      <td>['respiratory depression', 'extreme somnolence progressing to stupor or coma', 'skeletal muscle flaccidity', 'cold and clammy skin', 'bradycardia', 'hypotension', 'cardiac arrest', 'death']</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Drug Route PO Starting Dose  PO Maximum Onset (Minutes)  \\\n",
       "2912  Hydrocodone    PO   5-10 mg 4-6 hr                          60   \n",
       "2032  Hydrocodone    PO   5-10 mg 4-6 hr                          60   \n",
       "3697  Hydrocodone    PO   5-10 mg 4-6 hr                          60   \n",
       "2302  Hydrocodone    PO   5-10 mg 4-6 hr                          60   \n",
       "3626  Hydrocodone    PO   5-10 mg 4-6 hr                          60   \n",
       "\n",
       "     PO Maximum Peak (Minutes) PO Maximum Duration (Hours) Metabolism  \\\n",
       "2912                       120                           6      Liver   \n",
       "2032                       120                           6      Liver   \n",
       "3697                       120                           6      Liver   \n",
       "2302                       120                           6      Liver   \n",
       "3626                       120                           6      Liver   \n",
       "\n",
       "     Average Half Life (Hours)  \\\n",
       "2912                         4   \n",
       "2032                         4   \n",
       "3697                         4   \n",
       "2302                         4   \n",
       "3626                         4   \n",
       "\n",
       "                                                                                                                                               Comments  \\\n",
       "2912  Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.   \n",
       "2032  Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.   \n",
       "3697  Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.   \n",
       "2302  Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.   \n",
       "3626  Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.   \n",
       "\n",
       "                                                              Side Effects  \\\n",
       "2912  ['LIGHTHEADEDNESS', ' DIZZINESS', ' SEDATION', 'NAUSEA', 'VOMITING']   \n",
       "2032  ['LIGHTHEADEDNESS', ' DIZZINESS', ' SEDATION', 'NAUSEA', 'VOMITING']   \n",
       "3697  ['LIGHTHEADEDNESS', ' DIZZINESS', ' SEDATION', 'NAUSEA', 'VOMITING']   \n",
       "2302  ['LIGHTHEADEDNESS', ' DIZZINESS', ' SEDATION', 'NAUSEA', 'VOMITING']   \n",
       "3626  ['LIGHTHEADEDNESS', ' DIZZINESS', ' SEDATION', 'NAUSEA', 'VOMITING']   \n",
       "\n",
       "                                                                                                                                                                               Overdose Information  \n",
       "2912  ['respiratory depression', 'extreme somnolence progressing to stupor or coma', 'skeletal muscle flaccidity', 'cold and clammy skin', 'bradycardia', 'hypotension', 'cardiac arrest', 'death']  \n",
       "2032  ['respiratory depression', 'extreme somnolence progressing to stupor or coma', 'skeletal muscle flaccidity', 'cold and clammy skin', 'bradycardia', 'hypotension', 'cardiac arrest', 'death']  \n",
       "3697  ['respiratory depression', 'extreme somnolence progressing to stupor or coma', 'skeletal muscle flaccidity', 'cold and clammy skin', 'bradycardia', 'hypotension', 'cardiac arrest', 'death']  \n",
       "2302  ['respiratory depression', 'extreme somnolence progressing to stupor or coma', 'skeletal muscle flaccidity', 'cold and clammy skin', 'bradycardia', 'hypotension', 'cardiac arrest', 'death']  \n",
       "3626  ['respiratory depression', 'extreme somnolence progressing to stupor or coma', 'skeletal muscle flaccidity', 'cold and clammy skin', 'bradycardia', 'hypotension', 'cardiac arrest', 'death']  "
      ]
     },
     "execution_count": 626,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fent = \"Fentanyl\"\n",
    "hydc = \"Hydrocodone\"\n",
    "hydm = \"Hydromorphone\"\n",
    "code = \"Codeine\"\n",
    "merp = \"Meperidine\"\n",
    "\n",
    "c1 = data_received_df[\"Drug\"] == hydc\n",
    "c2 = data_received_df[\"Drug\"] == fent\n",
    "c3 = data_received_df[\"Drug\"] == hydm\n",
    "c4 = data_received_df[\"Drug\"] == code\n",
    "#Setting the values for hydrocodone.\n",
    "\n",
    "data_received_df.loc[c1,\"Route\"] = \"PO\" \n",
    "data_received_df.loc[c1,\"PO Starting Dose\"] = \"5-10 mg 4-6 hr\"\n",
    "data_received_df.loc[c1,\"PO Maximum Onset (Minutes)\"] = \"60\"\n",
    "data_received_df.loc[c1,\"PO Maximum Peak (Minutes)\"] = \"120\"\n",
    "data_received_df.loc[c1,\"PO Maximum Duration (Hours)\"] = \"6\"\n",
    "data_received_df.loc[c1,\"Average Half Life (Hours)\"] = \"4\"\n",
    "data_received_df.loc[c1,\"Comments\"] = \"Available at UIHC as: · Tablet with 5 mg hydrocodone and 500 mg acetaminophen.· Elixir with 2.5 mg hydrocodone and 167 mg acetaminophen per 5 ml.\"\n",
    "#Cleaning up all the information to ensure clarity.\n",
    "\n",
    "data_received_df.loc[c2,\"Route\"] = \"IM, IV, Transdermal\"\n",
    "data_received_df.loc[c2,\"PO Starting Dose\"] = \"0.25 - 1 mcg/Kg as needed\"\n",
    "data_received_df.loc[c2,\"PO Maximum Onset (Minutes)\"] = \"0\"\n",
    "data_received_df.loc[c2,\"PO Maximum Peak (Minutes)\"] = \"5\"\n",
    "data_received_df.loc[c2,\"PO Maximum Duration (Hours)\"] = \"72\"\n",
    "data_received_df.loc[c2,\"Average Half Life (Hours)\"] = \"3\"\n",
    "data_received_df.loc[c2,\"Comments\"] = \"Because the PO route is not available, all information here is assumed via the IV route.\\n- Transdermal should NOT be used to treat acute pain. · Transdermal patch should be used only in opioid tolerant patients.  Effects of patch last for 18 - 24 hours after the patch is removed. · Use of IV fentanyl is restricted to Oncology, Burn Service, Palliative Care, Intensive Care Units or based on recommendation by the Pain Service.  Appropriate monitoring is required. Refer to Nursing Policies 8.021 and 8.025.\"\n",
    "\n",
    "data_received_df.loc[c3,\"Drug\"] = \"Hydromorphone\"\n",
    "data_received_df.loc[c3,\"Route\"] = \"PO, IM, SQ, IV\"\n",
    "data_received_df.loc[c3,\"PO Starting Dose\"] = \"2-4 mg 4-6 hr\"\n",
    "data_received_df.loc[c3,\"PO Maximum Onset (Minutes)\"] = \"60\"\n",
    "data_received_df.loc[c3,\"PO Maximum Peak (Minutes)\"] = \"120\"\n",
    "data_received_df.loc[c3,\"PO Maximum Duration (Hours)\"] = \"5\"\n",
    "data_received_df.loc[c3,\"Average Half Life (Hours)\"] = \"3\"\n",
    "data_received_df.loc[c3,\"Comments\"] = \"· Chronic treatment may require 3 - 4 hour dosing. · IV doses should be administered over at least 2-3 minutes.\"\n",
    "                     \n",
    "data_received_df.loc[c4,\"Drug\"] = \"Codeine\"\n",
    "data_received_df.loc[c4,\"Route\"] = \"PO, IM, SQ\"\n",
    "data_received_df.loc[c4,\"PO Starting Dose\"] = \"30-60 mg 4-6 hr\"\n",
    "data_received_df.loc[c4,\"PO Maximum Onset (Minutes)\"] = \"30\"\n",
    "data_received_df.loc[c4,\"PO Maximum Peak (Minutes)\"] = \"90\"\n",
    "data_received_df.loc[c4,\"PO Maximum Duration (Hours)\"] = \"6\"\n",
    "data_received_df.loc[c4,\"Average Half Life (Hours)\"] = \"3\"\n",
    "data_received_df.loc[c4,\"Comments\"] = \"· IV use (even at low doses and when given very slowly) may cause marked decrease in blood pressure; IV use is not recommended. · IM or SQ routes are the preferred parenteral routes.\"\n",
    "     \n",
    "data_received_df[\"PO Maximum Onset (Minutes)\"] = data_received_df[\"PO Maximum Onset (Minutes)\"].astype(int)\n",
    "data_received_df.sample(n=5, replace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 629,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "names = pd.unique(data_received_df[\"Drug\"])\n",
    "counts = [data_received_df[data_received_df.Drug == item].shape[0] for item in names]\n",
    "plt.pie(counts, labels=names)\n",
    "plt.title(\"Percentage of Prescriptions by Drug\")\n",
    "plt.show()\n",
    "#Pie chart to show how many of each drug are represented within this dataframe - It may be reasonable to infer which drugs\n",
    "#doctors prefer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 637,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Side Effects Per Drug')"
      ]
     },
     "execution_count": 637,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_received_df[\"Side Effects Count\"] = data_received_df[\"Side Effects\"].str[1:-1].str.split(\",\").str.len()\n",
    "sns.barplot(x=data_received_df[\"Drug\"],y=data_received_df[\"Side Effects Count\"]).set_title(\"Side Effects Per Drug\")\n",
    "#Chart to show which drugs have the most side effects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 640,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Maximum Duration Per Drug')"
      ]
     },
     "execution_count": 640,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_received_df[\"PO Maximum Duration (Hours)\"] = data_received_df[\"PO Maximum Duration (Hours)\"].astype(int)\n",
    "data_received_df.plot.bar(x=\"Drug\",y=\"PO Maximum Duration (Hours)\")\n",
    "sns.barplot(x=data_received_df[\"Drug\"],y=data_received_df[\"PO Maximum Duration (Hours)\"]).set_title(\"Maximum Duration Per Drug\")\n",
    "#Graph to show which durations from the drugs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 641,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Maximum Onset Time Per Drug')"
      ]
     },
     "execution_count": 641,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_received_df[\"PO Maximum Onset (Minutes)\"] = data_received_df[\"PO Maximum Onset (Minutes)\"].astype(int)\n",
    "sns.barplot(x=data_received_df[\"Drug\"],y=data_received_df[\"PO Maximum Onset (Minutes)\"]).set_title(\"Maximum Onset Time Per Drug\")\n",
    "#Graph to show how long it could take for a drug to take effect."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 643,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Maximum Peak Time Per Drug')"
      ]
     },
     "execution_count": 643,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_received_df[\"PO Maximum Peak (Minutes)\"] = data_received_df[\"PO Maximum Peak (Minutes)\"].astype(int)\n",
    "sns.barplot(x=data_received_df[\"Drug\"],y=data_received_df[\"PO Maximum Peak (Minutes)\"]).set_title(\"Maximum Peak Time Per Drug\")\n",
    "#Graph to compare the maximum peak in time based on different drugs."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
